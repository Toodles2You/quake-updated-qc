/*  Copyright (C) 1996-2022 id Software LLC

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

    See file, 'COPYING', for details.
*/

void(vector pos) placebullethole;
void(entity targ, entity inflictor, entity attacker, float damage) T_Damage;
void() player_run;
void(entity bomb, entity attacker, float rad, entity ignore) T_RadiusDamage;
void(vector org, vector vel, float damage) SpawnBlood;
void() SuperDamageSound;

void(float damage) spawn_touchblood;

void() HIP_LaserTouch =
{
	local vector org;
	local vector spot1, spot2;
	local vector oldvel;
	local float r;

	self.owner = world;
	self.cnt = self.cnt + 1;
	if (pointcontents (self.origin) == CONTENT_SKY)
	{
		remove (self);
		return;
	}
	oldvel = normalize (self.old_velocity);
	spot1 = self.origin - (16 * oldvel);
	spot2 = self.origin + (16 * oldvel);
	traceline (spot1, spot2, FALSE, self);
	self.origin = trace_endpos;

	org = self.origin;

	if (SUB_ShouldBleed (other))
	{
		if (self.lastvictim == other)
		{
			self.dmg = self.dmg / 2;
		}
		spawn_touchblood (self.dmg);
		T_Damage (other, self, self.lastvictim, self.dmg);
	}
	else if ((self.cnt == 3) || (random () < 0.15))
	{
		WriteByte (MSG_BROADCAST, SVC_TEMPENTITY);
		WriteByte (MSG_BROADCAST, TE_GUNSHOT);
		WriteCoord (MSG_BROADCAST, org_x);
		WriteCoord (MSG_BROADCAST, org_y);
		WriteCoord (MSG_BROADCAST, org_z);
	}
	else
	{
		self.dmg = 0.9 * self.dmg;
		self.velocity = oldvel + (2 * trace_plane_normal);
		self.velocity = normalize (self.velocity);
		self.velocity = self.speed * self.velocity;
		self.old_velocity = self.velocity;
		if (self.flags & FL_ONGROUND)
			self.flags = self.flags - FL_ONGROUND;
		r = random ();
		sound (self, CHAN_WEAPON, "hipweap/laserric.wav", 1, ATTN_STATIC);
		return;
	}
	sound (self, CHAN_WEAPON, "enforcer/enfstop.wav", 1, ATTN_STATIC);
	remove (self);
};
void() HIP_LaserThink =
{
	if (time > self.attack_finished)
	{
		remove (self);
		return;
	}
	if (self.flags & FL_ONGROUND)
		self.flags = self.flags - FL_ONGROUND;
	self.velocity = self.old_velocity;
	self.angles = vectoangles (self.velocity);
	self.nextthink = time + 0.1;
};

void(vector org, vector vec, float light) HIP_LaunchLaser =
{
	sound (self, CHAN_WEAPON, "hipweap/laserg.wav", 1, ATTN_NORM);

	vec = normalize (vec);

	newmis = spawn ();
	newmis.owner = self;
	newmis.classname = "hiplaser";
	newmis.lastvictim = self;
	newmis.movetype = MOVETYPE_FLYMISSILE;
	newmis.solid = SOLID_BBOX;
	if (light)
		newmis.effects = EF_DIMLIGHT;

	setmodel (newmis, "progs/lasrspik.mdl");
	setsize (newmis, '0 0 0', '0 0 0');

	setorigin (newmis, org);

	newmis.speed = 1000;
	newmis.dmg = 18;
	newmis.velocity = vec * newmis.speed;
	newmis.old_velocity = newmis.velocity;
	newmis.angles = vectoangles (newmis.velocity);
	newmis.avelocity = '0 0 400';

	newmis.nextthink = time;
	newmis.attack_finished = time + 5;
	newmis.think = HIP_LaserThink;
	newmis.touch = HIP_LaserTouch;
	newmis.count = 0;
};

/*
=================
HIP_FireLaser
=================
*/
void(float stat) HIP_FireLaser =
{
	local vector org;
	local vector dir;
	local vector out;
	local float ofs;
	local float aofs;

	if (!self.button0)
	{
		player_run ();
		return;
	}
	if (self.ammo_cells < 1)
	{
		W_SetWeapon (W_BestWeapon ());
		return;
	}
	SuperDamageSound ();
	self.effects = self.effects | EF_MUZZLEFLASH;
	makevectors (self.v_angle);

	ofs = 6;
	out = v_forward;
	out_z = 0;
	out = normalize (out);
	org = self.origin + ((12 - ofs) * v_up) + (12 * out);
	dir = aim (self, 1000);
	aofs = ofs * 0.707;
	if (stat == 0)
	{
		self.currentammo = self.ammo_cells = self.ammo_cells - 1;
		org = org + (aofs * v_right);
		org = org - (aofs * v_up);
		HIP_LaunchLaser (org, dir, 0);
		org = org - (2 * aofs * v_right);
		HIP_LaunchLaser (org, dir, 0);
	}
	else if (stat == 1)
	{
		self.currentammo = self.ammo_cells = self.ammo_cells - 1;
		org = org + (ofs * v_up);
		if (random () < 0.1)
		{
			HIP_LaunchLaser (org, dir, 1);
			newmis.dmg = 25;
		}
		else
			HIP_LaunchLaser (org, dir, 0);
	}
	self.punchangle_x = -1;
};

void(vector p1, vector p2, entity from, float damage) LightningDamage;

void(vector p1, vector p2, entity from, float damage) HIP_HammerDamage =
{
	LightningDamage (p1, p2, from, damage);
};

void() HIP_LightningThink =
{
	local vector org;
	local vector dst;
	local entity head;
	local entity selected;
	local float cur_dist;
	local float head_dist;
	local vector vec;
	local float dot;
	local float oldstate;
	local float dam;
	local vector end;

	if (time > self.delay)
	{
		if (self.enemy != world)
			self.enemy.struck_by_mjolnir = 0;
		remove (self);
		return;
	}
	oldstate = self.state;
	if (self.state == 0)
	{
		// look in our immediate vicinity
		self.enemy = world;
		selected = world;
		cur_dist = self.distance;
		head = findradius (self.owner.origin, self.distance);
		while (head)
		{
			if (!(head.flags & FL_NOTARGET) &&
				((head.flags & FL_MONSTER) || (head.flags & FL_CLIENT)))
			{
				if ((visible (head)) && (head != self.owner.owner) &&
					(SUB_IsAlive (head)))
				{
					head_dist = vlen (head.origin - self.lastvictim.origin);
					if ((head_dist < cur_dist) && (head.struck_by_mjolnir == 0))
					{
						selected = head;
						cur_dist = head_dist;
					}
				}
			}
			head = head.chain;
		}
		if (selected != world)
		{
			self.state = 1;
			self.enemy = selected;
			self.enemy.struck_by_mjolnir = 1;
		}
		else
		{
			makevectors (self.v_angle);
			org = self.owner.origin;
			end = org + v_forward * 200;
			end = end + (((400 * random ()) - 200) * v_right);

			traceline (org, end, TRUE, self);

			WriteByte (MSG_BROADCAST, SVC_TEMPENTITY);
			WriteByte (MSG_BROADCAST, TE_LIGHTNING2);
			WriteEntity (MSG_BROADCAST, self);
			WriteCoord (MSG_BROADCAST, org_x);
			WriteCoord (MSG_BROADCAST, org_y);
			WriteCoord (MSG_BROADCAST, org_z);
			WriteCoord (MSG_BROADCAST, trace_endpos_x);
			WriteCoord (MSG_BROADCAST, trace_endpos_y);
			WriteCoord (MSG_BROADCAST, trace_endpos_z);

			self.nextthink = time + 0.1;
			return;
		}
	}
	org = self.lastvictim.origin;
	dst = self.enemy.absmin + 0.25 * (self.enemy.absmax - self.enemy.absmin);
	dst = dst + (random () * 0.5 * (self.enemy.absmax - self.enemy.absmin));
	traceline (org, dst, TRUE, self.owner.owner);

	if (trace_fraction != 1.0 || !SUB_IsAlive (self.enemy))
	{
		self.enemy.struck_by_mjolnir = 0;
		self.state = 0;
		self.nextthink = time + 0.1;
		return;
	}
	WriteByte (MSG_BROADCAST, SVC_TEMPENTITY);
	WriteByte (MSG_BROADCAST, TE_LIGHTNING2);
	WriteEntity (MSG_BROADCAST, self);
	WriteCoord (MSG_BROADCAST, org_x);
	WriteCoord (MSG_BROADCAST, org_y);
	WriteCoord (MSG_BROADCAST, org_z);
	WriteCoord (MSG_BROADCAST, trace_endpos_x);
	WriteCoord (MSG_BROADCAST, trace_endpos_y);
	WriteCoord (MSG_BROADCAST, trace_endpos_z);
	vec = normalize (self.enemy.origin - self.owner.origin);
	dot = vec * self.owner.movedir;
	head = self;
	self = self.owner.owner;
	if (oldstate == 0)
		dam = 80;
	else
		dam = 30;
	if (dot > 0.3)
		HIP_HammerDamage (org, trace_endpos, self, dam);
	else
		HIP_HammerDamage (org, trace_endpos, self, dam * 0.5);
	self = head;

	self.nextthink = time + 0.2;
};

void(entity prev, entity own, float dst) HIP_SpawnMjolnirLightning =
{
	local entity light;
	// spawn actual lightning
	light = spawn ();
	light.delay = time + 0.8;
	light.state = 0;
	light.lastvictim = prev;
	light.distance = dst;
	light.owner = own;
	light.v_angle = self.angles;
	light.v_angle_x = 0;
	light.v_angle_z = 0;
	light.origin = own.origin;
	light.think = HIP_LightningThink;
	light.nextthink = time;
};

void() HIP_SpawnMjolnirBase =
{
	local entity light;
	// spawn lightning base
	light = spawn ();
	light.origin = trace_endpos;
	light.flags = 0;
	light.owner = self;
	light.struck_by_mjolnir = 1;
	light.think = SUB_Remove;
	light.nextthink = time + 1;
	sound (light, CHAN_AUTO, "hipweap/mjolslap.wav", 1, ATTN_NORM);
	sound (light, CHAN_WEAPON, "hipweap/mjolhit.wav", 1, ATTN_NORM);
	makevectors (self.v_angle);
	light.movedir = v_forward;
	HIP_SpawnMjolnirLightning (light, light, 350);
	HIP_SpawnMjolnirLightning (light, light, 350);
	HIP_SpawnMjolnirLightning (light, light, 350);
	HIP_SpawnMjolnirLightning (light, light, 350);
};

void() HIP_FireMjolnirLightning =
{
	local float cells;

	// explode if under water
	if (self.waterlevel > 1)
	{
		cells = self.ammo_cells;
		self.currentammo = self.ammo_cells = 0;
		discharged = TRUE;
		T_RadiusDamage (self, self, 35 * cells, world);
		discharged = FALSE;
		return;
	}

	self.currentammo = self.ammo_cells = self.ammo_cells - 15;

	HIP_SpawnMjolnirBase ();
};

void() HIP_FireMjolnir =
{
	local vector org;
	local entity hit;
	local float damage;
	local vector source;

	self.attack_finished = time + 0.4;
	source = self.origin + '0 0 16';
	makevectors (self.v_angle);
	traceline (source, source + v_forward * 32, FALSE, self);
	if (trace_fraction == 1.0 && (self.ammo_cells >= 15))
	{
		source = source + v_forward * 32;
		traceline (source, source - v_up * 50, FALSE, self);
		if (trace_fraction > 0.3 && trace_fraction < 1.0)
		{
			HIP_FireMjolnirLightning ();
			self.attack_finished = time + 1.5;
			return;
		}
	}
	hit = trace_ent;
	org = trace_endpos - v_forward * 4;

	if (SUB_ShouldBleed (hit))
	{
		damage = 50;
		if (hit.classname == "monster_zombie")
			damage = 70;
		hit.axhitme = TRUE;
		SpawnBlood (org, v_forward, damage);
		T_Damage (hit, self, self, damage);
		hit.axhitme = FALSE;
	}
	else
	{ // hit wall
		if (trace_fraction != 1.0)
		{
			sound (self, CHAN_WEAPON, "hipweap/mjoltink.wav", 1, ATTN_NORM);
			WriteByte (MSG_BROADCAST, SVC_TEMPENTITY);
			WriteByte (MSG_BROADCAST, TE_GUNSHOT);
			WriteCoord (MSG_BROADCAST, org_x);
			WriteCoord (MSG_BROADCAST, org_y);
			WriteCoord (MSG_BROADCAST, org_z);
		}
		else
		{
			sound (self, CHAN_WEAPON, "knight/sword1.wav", 1, ATTN_NORM);
		}
	}
	self.attack_finished = time + 0.4;
};

// called by worldspawn
void() W_Precache =
{
	precache_sound ("weapons/r_exp3.wav"); // used in C code
	precache_sound ("weapons/rocket1i.wav");
	precache_sound ("weapons/sgun1.wav");
	precache_sound ("weapons/guncock.wav");
	precache_sound ("weapons/ric1.wav"); // used in C code
	precache_sound ("weapons/ric2.wav"); // used in C code
	precache_sound ("weapons/ric3.wav"); // used in C code
	precache_sound ("weapons/spike2.wav");
	precache_sound ("weapons/tink1.wav"); // used in C code
	precache_sound ("weapons/grenade.wav");
	precache_sound ("weapons/bounce.wav");
	precache_sound ("weapons/shotgn2.wav");
	precache_sound ("enforcer/enfstop.wav");
	precache_sound ("knight/sword1.wav");
	precache_sound ("hipweap/laserg.wav");
	precache_sound ("hipweap/laserric.wav");
	precache_sound ("hipweap/proxwarn.wav");
	precache_sound ("hipweap/proxbomb.wav");
	precache_sound ("hipweap/mjolhit.wav");
	precache_sound ("hipweap/mjolslap.wav");
	precache_sound ("hipweap/mjoltink.wav");
};

float() crandom =
{
	return 2 * (random () - 0.5);
};

void() W_FireAxe =
{
	local vector source;
	local entity hit;
	local vector org;

	makevectors (self.v_angle);
	source = self.origin + '0 0 16';
	traceline (source, source + v_forward * 64, FALSE, self);
	if (trace_fraction == 1.0)
		return;

	hit = trace_ent;
	org = trace_endpos - v_forward * 4;

	if (SUB_ShouldBleed (hit))
	{
		hit.axhitme = TRUE;
		SpawnBlood (org, '0 0 0', 20);
		T_Damage (hit, self, self, 20);
		hit.axhitme = FALSE;
	}
	else
	{ // hit wall
		sound (self, CHAN_WEAPON, "player/axhit2.wav", 1, ATTN_NORM);
		WriteByte (MSG_BROADCAST, SVC_TEMPENTITY);
		WriteByte (MSG_BROADCAST, TE_GUNSHOT);
		WriteCoord (MSG_BROADCAST, org_x);
		WriteCoord (MSG_BROADCAST, org_y);
		WriteCoord (MSG_BROADCAST, org_z);
	}
};

vector() wall_velocity =
{
	local vector vel;

	vel = normalize (self.velocity);
	vel = vel + v_up * (random () - 0.5) + v_right * (random () - 0.5);
	vel = normalize (vel);
	vel = vel + 2 * trace_plane_normal;
	vel = vel * 200;

	return vel;
};

void(vector org, vector vel) SpawnMeatSpray =
{
	local entity missile;

	missile = spawn ();
	missile.owner = self;
	missile.movetype = MOVETYPE_BOUNCE;
	missile.solid = SOLID_NOT;

	makevectors (self.angles);

	missile.velocity = vel;
	missile.velocity_z = missile.velocity_z + 250 + 50 * random ();

	missile.avelocity = '3000 1000 2000';

	missile.nextthink = time + 1;
	missile.think = SUB_Remove;

	setmodel (missile, "progs/zom_gib.mdl");
	setsize (missile, '0 0 0', '0 0 0');
	setorigin (missile, org);
};

void(vector org, vector vel, float damage) SpawnBlood =
{
	particle (org, vel * 0.1, 73, damage * 2);
};

void(float damage) spawn_touchblood =
{
	local vector vel;

	vel = wall_velocity () * 0.2;
	SpawnBlood (self.origin + vel * 0.01, vel, damage);
};

void(vector org, vector vel) SpawnChunk =
{
	particle (org, vel * 0.02, 0, 10);
};

/*
==============================================================================
MULTI-DAMAGE

Collects multiple small damages into a single damage
==============================================================================
*/

entity multi_ent;
float multi_damage;

void() ClearMultiDamage =
{
	multi_ent = world;
	multi_damage = 0;
};

void() ApplyMultiDamage =
{
	if (!multi_ent)
		return;
	T_Damage (multi_ent, self, self, multi_damage);
};

void(entity hit, float damage) AddMultiDamage =
{
	if (!hit)
		return;

	if (hit != multi_ent)
	{
		ApplyMultiDamage ();
		multi_damage = damage;
		multi_ent = hit;
	}
	else
		multi_damage = multi_damage + damage;
};

void(float damage, vector dir) TraceAttack =
{
	local vector vel, org;

	vel = normalize (dir + v_up * crandom () + v_right * crandom ());
	vel = vel + 2 * trace_plane_normal;
	vel = vel * 200;

	org = trace_endpos - dir * 4;

	if (SUB_ShouldBleed (trace_ent))
	{
		SpawnBlood (org, vel * 0.2, damage);
		AddMultiDamage (trace_ent, damage);
	}
	else
	{
		WriteByte (MSG_BROADCAST, SVC_TEMPENTITY);
		WriteByte (MSG_BROADCAST, TE_GUNSHOT);
		WriteCoord (MSG_BROADCAST, org_x);
		WriteCoord (MSG_BROADCAST, org_y);
		WriteCoord (MSG_BROADCAST, org_z);
	}
};

/*
==============================================================================
FireBullets

Used by shotgun, super shotgun, and enemy soldier firing
Go to the trouble of combining multiple pellets into a single damage call.
==============================================================================
*/
void(float shotcount, vector dir, vector spread) FireBullets =
{
	local vector direction;
	local vector src;
	local float bullet;

	bullet = 0;

	makevectors (self.v_angle);

	src = self.origin + v_forward * 10;
	src_z = self.absmin_z + self.size_z * 0.7;

	ClearMultiDamage ();
	while (shotcount > 0)
	{
		direction = dir + crandom () * spread_x * v_right
				  + crandom () * spread_y * v_up;

		traceline (src, src + direction * 2048, FALSE, self);
		if (trace_fraction != 1.0)
		{
			TraceAttack (4, direction);
			if ((!bullet) && (trace_ent == world))
			{
				placebullethole (trace_endpos);
				bullet = 1;
			}
		}

		shotcount = shotcount - 1;
	}
	ApplyMultiDamage ();
};

void() W_FireShotgun =
{
	local vector dir;

	sound (self, CHAN_WEAPON, "weapons/guncock.wav", 1, ATTN_NORM);

	self.punchangle_x = -2;

	self.currentammo = self.ammo_shells = self.ammo_shells - 1;
	dir = aim (self, 100000);
	FireBullets (6, dir, '0.04 0.04 0');
};

void() W_FireSuperShotgun =
{
	local vector dir;

	if (self.ammo_shells < 2)
	{
		W_FireShotgun ();
		return;
	}

	sound (self, CHAN_WEAPON, "weapons/shotgn2.wav", 1, ATTN_NORM);

	self.punchangle_x = -4;

	self.currentammo = self.ammo_shells = self.ammo_shells - 2;
	dir = aim (self, 100000);
	FireBullets (14, dir, '0.14 0.08 0');
};

void() s_explode1 = [0, s_explode2] {};
void() s_explode2 = [1, s_explode3] {};
void() s_explode3 = [2, s_explode4] {};
void() s_explode4 = [3, s_explode5] {};
void() s_explode5 = [4, s_explode6] {};
void() s_explode6 = [5, SUB_Remove] {};

void(float type) BecomeExplosion =
{
	if (type)
	{
		WriteByte (MSG_BROADCAST, SVC_TEMPENTITY);
		WriteByte (MSG_BROADCAST, type);
		WriteCoord (MSG_BROADCAST, self.origin_x);
		WriteCoord (MSG_BROADCAST, self.origin_y);
		WriteCoord (MSG_BROADCAST, self.origin_z);
	}

	self.movetype = MOVETYPE_NONE;
	self.velocity = '0 0 0';
	self.touch = SUB_Null;
	setmodel (self, "progs/s_explod.spr");
	self.solid = SOLID_NOT;
	s_explode1 ();
};

void() T_MissileTouch =
{
	local float damg;

	if (pointcontents (self.origin) == CONTENT_SKY)
	{
		remove (self);
		return;
	}

	damg = 100 + random () * 20;

	if (other.health)
	{
		if (other.classname == "monster_shambler")
			damg = damg * 0.5;
		T_Damage (other, self, self.owner, damg);
	}

	// don't do radius damage to the other, because all the damage
	// was done in the impact
	T_RadiusDamage (self, self.owner, 120, other);

	self.origin = self.origin - 8 * normalize (self.velocity);

	BecomeExplosion (TE_EXPLOSION);
};

void() W_FireRocket =
{
	local entity missile;

	self.currentammo = self.ammo_rockets = self.ammo_rockets - 1;

	sound (self, CHAN_WEAPON, "weapons/sgun1.wav", 1, ATTN_NORM);

	self.punchangle_x = -2;

	missile = spawn ();
	missile.owner = self;
	missile.movetype = MOVETYPE_FLYMISSILE;
	missile.solid = SOLID_BBOX;
	missile.classname = "missile";

	makevectors (self.v_angle);
	missile.velocity = aim (self, 1000);
	missile.velocity = missile.velocity * 1000;
	missile.angles = vectoangles (missile.velocity);

	missile.touch = T_MissileTouch;

	missile.nextthink = time + 5;
	missile.think = SUB_Remove;

	setmodel (missile, "progs/missile.mdl");
	setsize (missile, '0 0 0', '0 0 0');
	setorigin (missile, self.origin + v_forward * 8 + '0 0 16');
	newmis = missile;
};

void(vector p1, vector p2, entity from, float damage) LightningDamage =
{
	local entity e1, e2, e3;
	local vector f;
	local float t;

	f = p2 - p1;
	f = normalize (f);
	t = f_x;
	f_x = 0 - f_y;
	f_y = t;
	f_z = 0;
	f = f * 16;

	e1 = e2 = e3 = world;

	traceline (p1, p2, FALSE, from);
	e1 = trace_ent;
	if (SUB_ShouldBleed (e1) && !e1.wetsuit_finished)
	{
		particle (trace_endpos, '0 0 100', 225, damage * 4);
		T_Damage (e1, from, from, damage);
		if (from.classname == "player")
		{
			if (e1.classname == "player")
				e1.velocity_z = e1.velocity_z + 400;
		}
	}

	traceline (p1 + f, p2 + f, FALSE, from);
	e2 = trace_ent;
	if (e2 != e1 && SUB_ShouldBleed (e2) && !e2.wetsuit_finished)
	{
		particle (trace_endpos, '0 0 100', 225, damage * 4);
		T_Damage (e2, from, from, damage);
	}

	traceline (p1 - f, p2 - f, FALSE, from);
	e3 = trace_ent;
	if (e3 != e1 && e3 != e2 && SUB_ShouldBleed (e3) && !e3.wetsuit_finished)
	{
		particle (trace_endpos, '0 0 100', 225, damage * 4);
		T_Damage (e3, from, from, damage);
	}
};

void() W_FireLightning =
{
	local vector org;
	local float cells;

	if (self.ammo_cells < 1)
	{
		W_SetWeapon (W_BestWeapon ());
		return;
	}

	// explode if under water
	if (self.waterlevel > 1)
	{
		cells = self.ammo_cells;
		self.ammo_cells = 0;
		W_SetWeapon (W_BestWeapon ());
		discharged = TRUE;
		T_RadiusDamage (self, self, 35 * cells, world);
		discharged = FALSE;
		return;
	}

	if (self.t_width < time)
	{
		sound (self, CHAN_WEAPON, "weapons/lhit.wav", 1, ATTN_NORM);
		self.t_width = time + 0.6;
	}
	self.punchangle_x = -2;

	self.currentammo = self.ammo_cells = self.ammo_cells - 1;

	org = self.origin + '0 0 16';

	traceline (org, org + v_forward * 600, TRUE, self);

	WriteByte (MSG_BROADCAST, SVC_TEMPENTITY);
	WriteByte (MSG_BROADCAST, TE_LIGHTNING2);
	WriteEntity (MSG_BROADCAST, self);
	WriteCoord (MSG_BROADCAST, org_x);
	WriteCoord (MSG_BROADCAST, org_y);
	WriteCoord (MSG_BROADCAST, org_z);
	WriteCoord (MSG_BROADCAST, trace_endpos_x);
	WriteCoord (MSG_BROADCAST, trace_endpos_y);
	WriteCoord (MSG_BROADCAST, trace_endpos_z);

	LightningDamage (self.origin, trace_endpos + v_forward * 4, self, 30);
};

void() GrenadeExplode =
{
	T_RadiusDamage (self, self.owner, 120, world);
	BecomeExplosion (TE_EXPLOSION);
};

void() GrenadeTouch =
{
	if (other.takedamage == DAMAGE_AIM)
	{
		GrenadeExplode ();
		return;
	}
	sound (self, CHAN_WEAPON, "weapons/bounce.wav", 1, ATTN_NORM);
	if (self.velocity == '0 0 0')
		self.avelocity = '0 0 0';
};

void() W_FireGrenade =
{
	local entity missile;

	self.currentammo = self.ammo_rockets = self.ammo_rockets - 1;

	sound (self, CHAN_WEAPON, "weapons/grenade.wav", 1, ATTN_NORM);

	self.punchangle_x = -2;

	missile = spawn ();
	missile.owner = self;
	missile.movetype = MOVETYPE_BOUNCE;
	missile.solid = SOLID_BBOX;
	missile.classname = "grenade";

	makevectors (self.v_angle);

	if (self.v_angle_x)
		missile.velocity = v_forward * 600 + v_up * 200
						 + crandom () * v_right * 10 + crandom () * v_up * 10;
	else
	{
		missile.velocity = aim (self, 10000);
		missile.velocity = missile.velocity * 600;
		missile.velocity_z = 200;
	}

	missile.avelocity = '300 300 300';

	missile.angles = vectoangles (missile.velocity);

	missile.touch = GrenadeTouch;

	missile.nextthink = time + 2.5;
	missile.think = GrenadeExplode;

	setmodel (missile, "progs/grenade.mdl");
	setsize (missile, '0 0 0', '0 0 0');
	setorigin (missile, self.origin);
};

void() ProximityExplode =
{
	T_RadiusDamage (self, self.owner, 95, world);
	BecomeExplosion (TE_EXPLOSION);
};

float NumProximityGrenades;

void() ProximityGrenadeExplode =
{
	self.takedamage = DAMAGE_NO;
	NumProximityGrenades = NumProximityGrenades - 1;
	self.deathtype = "exploding";
	self.nextthink = time + 0.1;
	self.owner = self.lastvictim;
	self.think = ProximityExplode;
};

void() ProximityGrenadeTouch =
{
	if (other == self)
		return;
	if (other.classname == self.classname)
		return;
	self.movetype = MOVETYPE_TOSS;
	if (self.state == 1)
		return;
	if (vlen (other.velocity) > 0)
	{
		ProximityGrenadeExplode ();
		self.think ();
		return;
	}
	if (other.takedamage == DAMAGE_AIM)
	{
		ProximityGrenadeExplode ();
		self.think ();
		return;
	}
	sound (self, CHAN_WEAPON, "weapons/bounce.wav", 1, ATTN_NORM);
	self.movetype = MOVETYPE_NONE;
	setsize (self, '-8 -8 -8', '8 8 8');
	self.state = 1;
	self.spawnmaster = other;
};

void() ProximityBomb =
{
	local entity head;
	local float blowup;

	if ((time > self.delay) || (NumProximityGrenades > 15) ||
		(vlen (self.spawnmaster.velocity) > 0))
	{
		ProximityGrenadeExplode ();
		self.think ();
		return;
	}
	self.owner = world;
	self.takedamage = DAMAGE_YES;
	head = findradius (self.origin, 140);
	blowup = 0;

	while (head)
	{
		if ((head != self) && (SUB_IsAlive (head)) &&
			(head.flags & (FL_CLIENT | FL_MONSTER)) &&
			(head.classname != self.classname))
			blowup = 1;
		if ((head.classname == self.classname) && (head.state == 0))
			blowup = 1;
		traceline (self.origin, head.origin, TRUE, self);
		if (trace_fraction != 1.0)
			blowup = 0;
		if (blowup == 1)
		{
			sound (self, CHAN_WEAPON, "hipweap/proxwarn.wav", 1, ATTN_NORM);
			ProximityGrenadeExplode ();
			self.nextthink = time + 0.5;
			return;
		}
		head = head.chain;
	}
	self.nextthink = time + 0.25;
};

void() W_FireProximityGrenade =
{
	local entity missile;

	NumProximityGrenades = NumProximityGrenades + 1;
	self.currentammo = self.ammo_rockets = self.ammo_rockets - 1;

	sound (self, CHAN_WEAPON, "hipweap/proxbomb.wav", 1, ATTN_NORM);

	self.punchangle_x = -2;

	missile = spawn ();
	missile.owner = self;
	missile.lastvictim = self;
	missile.movetype = MOVETYPE_TOSS;
	missile.solid = SOLID_BBOX;
	missile.classname = "proximity_grenade";
	missile.takedamage = DAMAGE_NO;
	missile.health = 5;
	missile.state = 0;

	// set missile speed

	makevectors (self.v_angle);

	if (self.v_angle_x)
		missile.velocity = v_forward * 600 + v_up * 200
						 + crandom () * v_right * 10 + crandom () * v_up * 10;
	else
	{
		missile.velocity = aim (self, 10000);
		missile.velocity = missile.velocity * 600;
		missile.velocity_z = 200;
	}

	missile.avelocity = '100 600 100';

	missile.angles = vectoangles (missile.velocity);

	missile.touch = ProximityGrenadeTouch;

	// set missile duration
	missile.nextthink = time + 2;
	missile.delay = time + 15 + (10 * random ());
	missile.think = ProximityBomb;
	missile.th_die = ProximityGrenadeExplode;

	setmodel (missile, "progs/proxbomb.mdl");
	setorigin (missile, self.origin);
	setsize (missile, '-1 -1 -1', '1 1 1');
};

//=============================================================================

void() spike_touch;
void() superspike_touch;

void(vector org, vector dir) launch_spike =
{
	newmis = spawn ();
	newmis.owner = self;
	newmis.movetype = MOVETYPE_FLYMISSILE;
	newmis.solid = SOLID_BBOX;

	newmis.angles = vectoangles (dir);

	newmis.touch = spike_touch;
	newmis.classname = "spike";
	newmis.think = SUB_Remove;
	newmis.nextthink = time + 6;
	setmodel (newmis, "progs/spike.mdl");
	setsize (newmis, '0 0 0', '0 0 0');
	setorigin (newmis, org);

	newmis.velocity = dir * 1000;
};

void() W_FireSuperSpikes =
{
	local vector dir;

	sound (self, CHAN_WEAPON, "weapons/spike2.wav", 1, ATTN_NORM);
	self.attack_finished = time + 0.2;
	self.currentammo = self.ammo_nails = self.ammo_nails - 2;
	dir = aim (self, 1000);
	launch_spike (self.origin + '0 0 16', dir);
	newmis.touch = superspike_touch;
	setmodel (newmis, "progs/s_spike.mdl");
	setsize (newmis, '0 0 0', '0 0 0');
	self.punchangle_x = -2;
};

void(float ox) W_FireSpikes =
{
	local vector dir;

	makevectors (self.v_angle);

	if (self.ammo_nails >= 2 && self.weapon == IT_SUPER_NAILGUN)
	{
		W_FireSuperSpikes ();
		return;
	}

	if (self.ammo_nails < 1)
	{
		W_SetWeapon (W_BestWeapon ());
		return;
	}

	sound (self, CHAN_WEAPON, "weapons/rocket1i.wav", 1, ATTN_NORM);
	self.attack_finished = time + 0.2;
	self.currentammo = self.ammo_nails = self.ammo_nails - 1;
	dir = aim (self, 1000);
	launch_spike (self.origin + '0 0 16' + v_right * ox, dir);

	self.punchangle_x = -2;
};

void() spike_touch =
{
	if (pointcontents (self.origin) == CONTENT_SKY)
	{
		remove (self);
		return;
	}

	// hit something that bleeds
	if (SUB_ShouldBleed (other))
	{
		spawn_touchblood (9);
		T_Damage (other, self, self.owner, 9);
	}
	else
	{
		WriteByte (MSG_BROADCAST, SVC_TEMPENTITY);

		if (self.classname == "wizspike")
			WriteByte (MSG_BROADCAST, TE_WIZSPIKE);
		else if (self.classname == "knightspike")
			WriteByte (MSG_BROADCAST, TE_KNIGHTSPIKE);
		else
			WriteByte (MSG_BROADCAST, TE_SPIKE);
		WriteCoord (MSG_BROADCAST, self.origin_x);
		WriteCoord (MSG_BROADCAST, self.origin_y);
		WriteCoord (MSG_BROADCAST, self.origin_z);
	}

	remove (self);
};

void() superspike_touch =
{
	if (pointcontents (self.origin) == CONTENT_SKY)
	{
		remove (self);
		return;
	}

	// hit something that bleeds
	if (SUB_ShouldBleed (other))
	{
		spawn_touchblood (18);
		T_Damage (other, self, self.owner, 18);
	}
	else
	{
		WriteByte (MSG_BROADCAST, SVC_TEMPENTITY);
		WriteByte (MSG_BROADCAST, TE_SUPERSPIKE);
		WriteCoord (MSG_BROADCAST, self.origin_x);
		WriteCoord (MSG_BROADCAST, self.origin_y);
		WriteCoord (MSG_BROADCAST, self.origin_z);
	}

	remove (self);
};

void() W_SetCurrentAmmo =
{
	self.items = self.items - (self.items & IT_AMMO);

	if (self.weapon == IT_AXE)
		self.currentammo = 0;
	else if (self.weapon == IT_SHOTGUN ||
			 self.weapon == IT_SUPER_SHOTGUN)
	{
		self.currentammo = self.ammo_shells;
		self.items = self.items | IT_SHELLS;
	}
	else if (self.weapon == IT_NAILGUN ||
			 self.weapon == IT_SUPER_NAILGUN)
	{
		self.currentammo = self.ammo_nails;
		self.items = self.items | IT_NAILS;
	}
	else if (self.weapon == IT_GRENADE_LAUNCHER ||
			 self.weapon == IT_ROCKET_LAUNCHER ||
			 self.weapon == IT_PROXIMITY_GUN)
	{
		self.currentammo = self.ammo_rockets;
		self.items = self.items | IT_ROCKETS;
	}
	else if (self.weapon == IT_LIGHTNING || self.weapon == IT_LASER_CANNON ||
			 self.weapon == IT_MJOLNIR)
	{
		self.currentammo = self.ammo_cells;
		self.items = self.items | IT_CELLS;
	}
	else
		self.currentammo = 0;
};

void(float weap) W_SetWeapon =
{
	if (self.weapon == weap)
	{
		W_SetCurrentAmmo ();
		return;
	}

	player_run (); // get out of any weapon firing states

	self.weapon = weap;

	if (self.weapon == IT_AXE)
		self.weaponmodel = "progs/v_axe.mdl";
	else if (self.weapon == IT_SHOTGUN)
		self.weaponmodel = "progs/v_shot.mdl";
	else if (self.weapon == IT_SUPER_SHOTGUN)
		self.weaponmodel = "progs/v_shot2.mdl";
	else if (self.weapon == IT_NAILGUN)
		self.weaponmodel = "progs/v_nail.mdl";
	else if (self.weapon == IT_SUPER_NAILGUN)
		self.weaponmodel = "progs/v_nail2.mdl";
	else if (self.weapon == IT_LASER_CANNON)
		self.weaponmodel = "progs/v_laserg.mdl";
	else if (self.weapon == IT_GRENADE_LAUNCHER)
		self.weaponmodel = "progs/v_rock.mdl";
	else if (self.weapon == IT_ROCKET_LAUNCHER)
		self.weaponmodel = "progs/v_rock2.mdl";
	else if (self.weapon == IT_LIGHTNING)
		self.weaponmodel = "progs/v_light.mdl";
	else if (self.weapon == IT_MJOLNIR)
		self.weaponmodel = "progs/v_hammer.mdl";
	else if (self.weapon == IT_PROXIMITY_GUN)
		self.weaponmodel = "progs/v_prox.mdl";
	else
		self.weaponmodel = "";

	self.weaponframe = 0;

	W_SetCurrentAmmo ();
};

float() W_BestWeapon =
{
	local float it;

	it = self.items;

	if (self.waterlevel <= 1 && self.ammo_cells >= 1 && (it & IT_LIGHTNING))
		return IT_LIGHTNING;
	if (self.ammo_cells >= 1 && (it & IT_LASER_CANNON))
		return IT_LASER_CANNON;
	if (self.ammo_nails >= 2 && (it & IT_SUPER_NAILGUN))
		return IT_SUPER_NAILGUN;
	if (self.ammo_shells >= 2 && (it & IT_SUPER_SHOTGUN))
		return IT_SUPER_SHOTGUN;
	if (self.ammo_nails >= 1 && (it & IT_NAILGUN))
		return IT_NAILGUN;
	if (self.ammo_shells >= 1 && (it & IT_SHOTGUN))
		return IT_SHOTGUN;
	if (it & IT_MJOLNIR)
		return IT_MJOLNIR;

	return IT_AXE;
};

float() W_CheckNoAmmo =
{
	if (self.currentammo > 0)
		return TRUE;

	if (self.weapon == IT_AXE || self.weapon == IT_MJOLNIR)
		return TRUE;

	W_SetWeapon (W_BestWeapon ());

	if (self.currentammo > 0)
		return TRUE;

	if (self.weapon == IT_AXE || self.weapon == IT_MJOLNIR)
		return TRUE;

	return FALSE;
};

void() player_axe1;
void() player_axeb1;
void() player_axec1;
void() player_axed1;
void() player_shot1;
void() player_nail1;
void() player_light1;
void() player_rocket1;
void() player_laser1;
void() player_hammer1;
void() player_mjolnir1;

void() W_Attack =
{
	local float r;

	if (!W_CheckNoAmmo ())
		return;

	makevectors (self.v_angle);
	self.show_hostile = time + 1; // wake monsters up

	if (self.weapon == IT_AXE)
	{
		sound (self, CHAN_WEAPON, "weapons/ax1.wav", 1, ATTN_NORM);
		r = random ();
		if (r < 0.25)
			player_axe1 ();
		else if (r < 0.5)
			player_axeb1 ();
		else if (r < 0.75)
			player_axec1 ();
		else
			player_axed1 ();
		self.attack_finished = time + 0.5;
	}
	else if (self.weapon == IT_SHOTGUN)
	{
		player_shot1 ();
		W_FireShotgun ();
		self.attack_finished = time + 0.5;
	}
	else if (self.weapon == IT_SUPER_SHOTGUN)
	{
		player_shot1 ();
		W_FireSuperShotgun ();
		self.attack_finished = time + 0.7;
	}
	else if (self.weapon == IT_NAILGUN)
	{
		player_nail1 ();
	}
	else if (self.weapon == IT_SUPER_NAILGUN)
	{
		player_nail1 ();
	}
	else if (self.weapon == IT_GRENADE_LAUNCHER)
	{
		player_rocket1 ();
		W_FireGrenade ();
		self.attack_finished = time + 0.6;
	}
	else if (self.weapon == IT_ROCKET_LAUNCHER)
	{
		player_rocket1 ();
		W_FireRocket ();
		self.attack_finished = time + 0.8;
	}
	else if (self.weapon == IT_LIGHTNING)
	{
		player_light1 ();
		self.attack_finished = time + 0.1;
		sound (self, CHAN_AUTO, "weapons/lstart.wav", 1, ATTN_NORM);
	}
	else if (self.weapon == IT_LASER_CANNON)
	{
		player_laser1 ();
	}
	else if (self.weapon == IT_MJOLNIR)
	{
		if (self.ammo_cells < 30)
			player_hammer1 ();
		else
			player_mjolnir1 ();
		self.attack_finished = time + 0.8;
	}
	else if (self.weapon == IT_PROXIMITY_GUN)
	{
		player_rocket1 ();
		W_FireProximityGrenade ();
		self.attack_finished = time + 0.6;
	}
};

void() W_ChangeWeapon =
{
	local float it, am, fl;
	local float oldimpulse;

	it = self.items;
	am = 0;
	fl = 0;

	if (self.impulse == 1)
	{
		fl = IT_AXE;
	}
	else if (self.impulse == 2)
	{
		fl = IT_SHOTGUN;
		if (self.ammo_shells < 1)
			am = 1;
	}
	else if (self.impulse == 3)
	{
		fl = IT_SUPER_SHOTGUN;
		if (self.ammo_shells < 2)
			am = 1;
	}
	else if (self.impulse == 4)
	{
		fl = IT_NAILGUN;
		if (self.ammo_nails < 1)
			am = 1;
	}
	else if (self.impulse == 5)
	{
		fl = IT_SUPER_NAILGUN;
		if (self.ammo_nails < 2)
			am = 1;

	}
	else if (self.impulse == 6)
	{
		if (self.weapon == IT_GRENADE_LAUNCHER)
		{
			fl = IT_PROXIMITY_GUN;
		}
		else
		{
			fl = IT_GRENADE_LAUNCHER;
		}
		if (self.ammo_rockets < 1)
			am = 1;
	}
	else if (self.impulse == 7)
	{
		fl = IT_ROCKET_LAUNCHER;
		if (self.ammo_rockets < 1)
			am = 1;
	}
	else if (self.impulse == 8)
	{
		fl = IT_LIGHTNING;
		if (self.ammo_cells < 1)
			am = 1;
	}
	else if (self.impulse == 225)
	{
		fl = IT_LASER_CANNON;
		if (self.ammo_cells < 1)
			am = 1;
	}
	else if (self.impulse == 226)
	{
		fl = IT_MJOLNIR;
	}

	oldimpulse = self.impulse;
	self.impulse = 0;

	if (!(self.items & fl))
	{
		if (fl == IT_GRENADE_LAUNCHER)
		{
			fl = IT_PROXIMITY_GUN;
			if (!(self.items & fl))
			{
				sprint (self, "No weapon\n");
				return;
			}
			if (self.ammo_rockets < 1)
				am = 1;
			else
				am = 0;
		}
		else
		{
			sprint (self, "No weapon\n");
			return;
		}
	}

	if (am)
	{
		sprint (self, "Not enough ammo\n");
		return;
	}

	W_SetWeapon (fl);
};

void() CheatCommand =
{
	if (deathmatch || coop)
		return;

	self.ammo_rockets = 100;
	self.ammo_nails = 200;
	self.ammo_shells = 100;
	self.ammo_cells = 100;
	self.items = self.items | IT_WEAPONS | IT_KEYS;

	W_SetWeapon (IT_ROCKET_LAUNCHER);
};

/*
==============================================================================
CycleWeaponCommand

Go to the next weapon with ammo
==============================================================================
*/
void() CycleWeaponCommand =
{
	local float am, fl;

	fl = self.weapon;

	while (1)
	{
		am = 0;

		if (fl == IT_MJOLNIR)
		{
			fl = IT_AXE;
		}
		else if (fl == IT_AXE)
		{
			fl = IT_SHOTGUN;
			if (self.ammo_shells < 1)
				am = 1;
		}
		else if (fl == IT_SHOTGUN)
		{
			fl = IT_SUPER_SHOTGUN;
			if (self.ammo_shells < 2)
				am = 1;
		}
		else if (fl == IT_SUPER_SHOTGUN)
		{
			fl = IT_NAILGUN;
			if (self.ammo_nails < 1)
				am = 1;
		}
		else if (fl == IT_NAILGUN)
		{
			fl = IT_SUPER_NAILGUN;
			if (self.ammo_nails < 2)
				am = 1;
		}
		else if (fl == IT_SUPER_NAILGUN)
		{
			fl = IT_GRENADE_LAUNCHER;
			if (self.ammo_rockets < 1)
				am = 1;
		}
		else if (fl == IT_GRENADE_LAUNCHER)
		{
			fl = IT_PROXIMITY_GUN;
			if (self.ammo_rockets < 1)
				am = 1;
		}
		else if (fl == IT_PROXIMITY_GUN)
		{
			fl = IT_ROCKET_LAUNCHER;
			if (self.ammo_rockets < 1)
				am = 1;
		}
		else if (fl == IT_ROCKET_LAUNCHER)
		{
			fl = IT_LIGHTNING;
			if (self.ammo_cells < 1)
				am = 1;
		}
		else if (fl == IT_LIGHTNING)
		{
			fl = IT_LASER_CANNON;
			if (self.ammo_cells < 1)
				am = 1;
		}
		else if (fl == IT_LASER_CANNON)
		{
			fl = IT_MJOLNIR;
		}

		if ((self.items & fl) && am == 0)
		{
			W_SetWeapon (fl);
			return;
		}
	}
};

/*
==============================================================================
CycleWeaponReverseCommand

Go to the prev weapon with ammo
==============================================================================
*/
void() CycleWeaponReverseCommand =
{
	local float am, fl;

	fl = self.weapon;

	while (1)
	{
		am = 0;

		if (fl == IT_MJOLNIR)
		{
			fl = IT_LASER_CANNON;
			if (self.ammo_cells < 1)
				am = 1;
		}
		else if (fl == IT_LASER_CANNON)
		{
			fl = IT_LIGHTNING;
			if (self.ammo_cells < 1)
				am = 1;
		}
		else if (fl == IT_LIGHTNING)
		{
			fl = IT_ROCKET_LAUNCHER;
			if (self.ammo_rockets < 1)
				am = 1;
		}
		else if (fl == IT_ROCKET_LAUNCHER)
		{
			fl = IT_PROXIMITY_GUN;
			if (self.ammo_rockets < 1)
				am = 1;
		}
		else if (fl == IT_PROXIMITY_GUN)
		{
			fl = IT_GRENADE_LAUNCHER;
			if (self.ammo_rockets < 1)
				am = 1;
		}
		else if (fl == IT_GRENADE_LAUNCHER)
		{
			fl = IT_SUPER_NAILGUN;
			if (self.ammo_nails < 2)
				am = 1;
		}
		else if (fl == IT_SUPER_NAILGUN)
		{
			fl = IT_NAILGUN;
			if (self.ammo_nails < 1)
				am = 1;
		}
		else if (fl == IT_NAILGUN)
		{
			fl = IT_SUPER_SHOTGUN;
			if (self.ammo_shells < 2)
				am = 1;
		}
		else if (fl == IT_SUPER_SHOTGUN)
		{
			fl = IT_SHOTGUN;
			if (self.ammo_shells < 1)
				am = 1;
		}
		else if (fl == IT_SHOTGUN)
		{
			fl = IT_AXE;
		}
		else if (fl == IT_AXE)
		{
			fl = IT_MJOLNIR;
		}

		if ((self.items & fl) && am == 0)
		{
			W_SetWeapon (fl);
			return;
		}
	}
};

void() ServerflagsCommand =
{
	serverflags = serverflags * 2 + 1;
};

void() QuadCheat =
{
	if (deathmatch || coop)
		return;
	self.super_time = 1;
	self.super_damage_finished = time + 30;
	self.items = self.items | IT_QUAD;
};

void() WetsuitCheat =
{
	if (deathmatch || coop)
		return;
	self.items2 = self.items2 | HIP_IT_WETSUIT;
	self.wetsuit_time = 1;
	self.wetsuit_finished = time + 30;
};

void() EmpathyShieldsCheat =
{
	if (deathmatch || coop)
		return;
	self.items2 = self.items2 | HIP_IT_EMPATHY_SHIELDS;
	self.empathy_time = 1;
	self.empathy_finished = time + 30;
};

void() DumpEntities =
{
	local entity head;
	local float i;

	i = 1;
	head = nextent (world);
	while (head != world)
	{
		dprint (ftos (i));
		dprint (" ");
		dprint (head.classname);
		dprint ("\n");
		head = nextent (head);
		i = i + 1;
	}
};

void() DumpLiveEntities =
{
	local entity head;
	local float i;

	i = 1;
	head = nextent (world);
	while (head != world)
	{
		if (head.health > 0)
		{
			dprint (ftos (i));
			dprint (" ");
			dprint (head.classname);
			dprint (" ");
			dprint (vtos (head.origin));
			dprint ("\n");
			dprint ("--------------------\n");
		}
		head = nextent (head);
		i = i + 1;
	}
};

void() Genocide =
{
	local entity head;

	if (deathmatch || coop)
		return;
	bprint ("Genocide!\n");
	head = nextent (world);
	while (head != world)
	{
		if ((SUB_IsAlive (head)) && (head.flags & FL_MONSTER))
		{
			T_Damage (head, world, world, head.health + 10);
		}
		head = nextent (head);
	}
};

float dump_coord;

void() ToggleDump =
{
	dump_coord = 1 - dump_coord;
	if (dump_coord == 1)
		bprint ("Dumping Player Location\n");
};

void() DumpCoordinates =
{
	local entity pl;
	pl = checkclient ();
	if (pl)
	{
		bprint ("Player: ");
		bprint (vtos (pl.origin));
		bprint ("\n");
	}
};

void() ImpulseCommands =
{
	if (self.impulse >= 1 && self.impulse <= 8)
		W_ChangeWeapon ();
	else if (self.impulse >= 225 && self.impulse <= 226)
		W_ChangeWeapon ();
	else if (self.impulse == 9)
		CheatCommand ();
	else if (self.impulse == 10)
		CycleWeaponCommand ();
	else if (self.impulse == 11)
		ServerflagsCommand ();
	else if (self.impulse == 12)
		CycleWeaponReverseCommand ();
	else if (self.impulse == 200)
		WetsuitCheat ();
	else if (self.impulse == 201)
		EmpathyShieldsCheat ();
	else if (self.impulse == 205)
		Genocide ();
	else if (self.impulse == 206)
		ToggleDump ();
	else if (self.impulse == 202)
		DumpEntities ();
	else if (self.impulse == 203)
		DumpLiveEntities ();
	else if (self.impulse == 255)
		QuadCheat ();
	else if (dump_coord == 1)
		DumpCoordinates ();

	self.impulse = 0;
};

void() W_WeaponFrame =
{
	if (time < self.attack_finished)
		return;

	if (self.impulse)
		ImpulseCommands ();

	// check for attack
	if (self.button0)
	{
		SuperDamageSound ();
		W_Attack ();
	}
};

void() SuperDamageSound =
{
	if (self.super_damage_finished > time)
	{
		if (self.super_sound < time)
		{
			self.super_sound = time + 1;
			sound (self, CHAN_BODY, "items/damage3.wav", 1, ATTN_NORM);
		}
	}
};
